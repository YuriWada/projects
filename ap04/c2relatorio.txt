O vetor a n√£o estava sendo inicializado na posi√ß√£o 9.
Ent√£o, o programa tentava acess√°-lo nesta posi√ß√£o, 
o que gerava o problema.

Para corrigir, precisamos iniciar o vetor na posi√ß√£o 9.

Script started on 2024-11-15 14:25:51-03:00 [TERM="xterm-256color" TTY="/dev/pts/7" COLUMNS="236" LINES="13"]
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gcc -o[Kg -o sc[Kc[K[Kc2 c2.c
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gdb c2.c[K[K[K[K[K[K[K[Kvalgrind -q c1[K2.c[K[K[K[K./c2.c
valgrind: ./c2.c: Permission denied
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ valgrind -q ./c2.c[K[K
==1860== Conditional jump or move depends on uninitialised value(s)
==1860==    at 0x48CA958: __vfprintf_internal (vfprintf-internal.c:1687)
==1860==    by 0x48B4D3E: printf (printf.c:33)
==1860==    by 0x1091EE: main (c2.c:11)
==1860== 
==1860== Use of uninitialised value of size 8
==1860==    at 0x48AE69B: _itoa_word (_itoa.c:179)
==1860==    by 0x48CA574: __vfprintf_internal (vfprintf-internal.c:1687)
==1860==    by 0x48B4D3E: printf (printf.c:33)
==1860==    by 0x1091EE: main (c2.c:11)
==1860== 
==1860== Conditional jump or move depends on uninitialised value(s)
==1860==    at 0x48AE6AD: _itoa_word (_itoa.c:179)
==1860==    by 0x48CA574: __vfprintf_internal (vfprintf-internal.c:1687)
==1860==    by 0x48B4D3E: printf (printf.c:33)
==1860==    by 0x1091EE: main (c2.c:11)
==1860== 
==1860== Conditional jump or move depends on uninitialised value(s)
==1860==    at 0x48CB228: __vfprintf_internal (vfprintf-internal.c:1687)
==1860==    by 0x48B4D3E: printf (printf.c:33)
==1860==    by 0x1091EE: main (c2.c:11)
==1860== 
==1860== Conditional jump or move depends on uninitialised value(s)
==1860==    at 0x48CA6EE: __vfprintf_internal (vfprintf-internal.c:1687)
==1860==    by 0x48B4D3E: printf (printf.c:33)
==1860==    by 0x1091EE: main (c2.c:11)
==1860== 
0 1 2 3 4 5 6 7 8 31 
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gdb ./c2
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04.2) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.
[m--Type <RET> for more, q to quit, c to continue without paging--

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./c2[m...
(gdb) list
1	#include <stdio.h>
2	#include <stdlib.h>
3	
4	int main(int argc, char** argv){
5	  int i;
6	  int a[10];
7	  for (i = 0; i < 9; i++)
8	    a[i] = i;
9	    
10	  for (i = 0; i < 10; i++){
(gdb) break 6
Breakpoint 1 at [34m0x11ab[m: file [32mc2.c[m, line 7.
(gdb) break 8
Breakpoint 2 at [34m0x11b4[m: file [32mc2.c[m, line 8.
(gdb) break 11
Breakpoint 3 at [34m0x11d3[m: file [32mc2.c[m, line 11.
(gdb) info b
Num     Type           Disp Enb Address            What
1       breakpoint     keep y   [34m0x00000000000011ab[m in [33mmain[m at [32mc2.c[m:7
2       breakpoint     keep y   [34m0x00000000000011b4[m in [33mmain[m at [32mc2.c[m:8
3       breakpoint     keep y   [34m0x00000000000011d3[m in [33mmain[m at [32mc2.c[m:11
(gdb) run
Starting program: /home/yuriwada/projects/ap04/c2 

Breakpoint 1, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:7
7	  for (i = 0; i < 9; i++)
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
(gdb) display a[i]
1: a[i] = -134491416
(gdb) display a[i][K[K[K[K[K[K[K[K[K[K[K[Knext[1Prunnext
7	  for (i = 0; i < 9; i++)
1: a[i] = 0
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 32767
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 1
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 1431654944
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 2
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 21845
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 3
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 0
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 4
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 0
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 5
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 1431654560
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 6
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = 21845
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 7
(gdb) next

Breakpoint 2, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:8
8	    a[i] = i;
1: a[i] = -8240
(gdb) next
7	  for (i = 0; i < 9; i++)
1: a[i] = 8
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 32767
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 0
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 0
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 1
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 1
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 2
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 2
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 3
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 3
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 4
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 4
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 5
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 5
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 6
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 6
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 7
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 7
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 8
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 8
(gdb) next

Breakpoint 3, [33mmain[m ([36margc[m=1, [36margv[m=0x7fffffffdfd8) at [32mc2.c[m:11
11	    printf("%d ", a[i]);
1: a[i] = 32767
(gdb) next
10	  for (i = 0; i < 10; i++){
1: a[i] = 32767
(gdb) next
13	  printf("\n");
1: a[i] = -100573440
(gdb) next
0 1 2 3 4 5 6 7 8 32767 
14	  return 0;
1: a[i] = -100573440
(gdb) next
15	}
1: a[i] = -100573440
(gdb) next
[33m__libc_start_main[m ([36mmain[m=0x555555555189 <main>, [36margc[m=1, [36margv[m=0x7fffffffdfd8, [36minit[m=<optimized out>, [36mfini[m=<optimized out>, [36mrtld_fini[m=<optimized out>, [36mstack_end[m=0x7fffffffdfc8) at [32m../csu/libc-start.c[m:342
342	../csu/libc-start.c: No such file or directory.
(gdb) quit
A debugging session is active.

	Inferior 1 [process 2211] will be killed.

Quit anyway? (y or n) y
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gdb [K[K[K[Kgcc -g -o c2correto c2correto.c
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gcc[K[K[Kvalgrind -q ./c2correto
0 1 2 3 4 5 6 7 8 9 
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ valgrind --leak-check-ful[K[K[K=[K[K=full ./c2correto
==3649== Memcheck, a memory error detector
==3649== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==3649== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==3649== Command: ./c2correto
==3649== 
0 1 2 3 4 5 6 7 8 9 
==3649== 
==3649== HEAP SUMMARY:
==3649==     in use at exit: 0 bytes in 0 blocks
==3649==   total heap usage: 1 allocs, 1 frees, 1,024 bytes allocated
==3649== 
==3649== All heap blocks were freed -- no leaks are possible
==3649== 
==3649== For lists of detected and suppressed errors, rerun with: -s
==3649== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ sc[K[Kexit
exit

Script done on 2024-11-15 14:33:08-03:00 [COMMAND_EXIT_CODE="0"]
