O c√≥digo apresentado possui erro na linha 22,
no momento em que o programa tenta armazenar
o retorno da fun√ß√£o sum_to_n no buffer. Por√©m,
o buffer n√£o possu√≠a mem√≥ria alocada.

Para resolver, podemos alocar mem√≥ria para o buffer.
No caso, foi alocada a mem√≥ria estaticamente.

Script started on 2024-11-15 23:36:41-03:00 [TERM="xterm-256color" TTY="/dev/pts/5" COLUMNS="236" LINES="23"]
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gcc -g -o c19 c19.c
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ valgrind c1[K[K--leak-chek[Kck=fu√ß[Kll ./c19
==5718== Memcheck, a memory error detector
==5718== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==5718== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==5718== Command: ./c19
==5718== 
enter a number:
5
==5718== Invalid write of size 1
==5718==    at 0x48E6AE7: _IO_str_overflow (strops.c:133)
==5718==    by 0x48E5023: _IO_default_xsputn (genops.c:399)
==5718==    by 0x48E5023: _IO_default_xsputn (genops.c:370)
==5718==    by 0x48C9971: __vfprintf_internal (vfprintf-internal.c:1373)
==5718==    by 0x48D80F8: __vsprintf_internal (iovsprintf.c:95)
==5718==    by 0x48B4EC7: sprintf (sprintf.c:30)
==5718==    by 0x10929C: printSum (c19.c:22)
==5718==    by 0x1092D4: main (c19.c:28)
==5718==  Address 0x0 is not stack'd, malloc'd or (recently) free'd
==5718== 
==5718== 
==5718== Process terminating with default action of signal 11 (SIGSEGV)
==5718==  Access not within mapped region at address 0x0
==5718==    at 0x48E6AE7: _IO_str_overflow (strops.c:133)
==5718==    by 0x48E5023: _IO_default_xsputn (genops.c:399)
==5718==    by 0x48E5023: _IO_default_xsputn (genops.c:370)
==5718==    by 0x48C9971: __vfprintf_internal (vfprintf-internal.c:1373)
==5718==    by 0x48D80F8: __vsprintf_internal (iovsprintf.c:95)
==5718==    by 0x48B4EC7: sprintf (sprintf.c:30)
==5718==    by 0x10929C: printSum (c19.c:22)
==5718==    by 0x1092D4: main (c19.c:28)
==5718==  If you believe this happened as a result of a stack
==5718==  overflow in your program's main thread (unlikely but
==5718==  possible), you can try to increase the size of the
==5718==  main thread stack using the --main-stacksize= flag.
==5718==  The main thread stack size used in this run was 8388608.
==5718== 
==5718== HEAP SUMMARY:
==5718==     in use at exit: 0 bytes in 0 blocks
==5718==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==5718== 
==5718== All heap blocks were freed -- no leaks are possible
==5718== 
==5718== For lists of detected and suppressed errors, rerun with: -s
==5718== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
Segmentation fault (core dumped)
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gcc -g -o c19correto c19correto.c
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ valgrind --leak-chek=f[K[K[Kck-[K=full ./c19correto
==7452== Memcheck, a memory error detector
==7452== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==7452== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==7452== Command: ./c19correto
==7452== 
enter a number:
5
sum=15
==7452== 
==7452== HEAP SUMMARY:
==7452==     in use at exit: 0 bytes in 0 blocks
==7452==   total heap usage: 2 allocs, 2 frees, 2,048 bytes allocated
==7452== 
==7452== All heap blocks were freed -- no leaks are possible
==7452== 
==7452== For lists of detected and suppressed errors, rerun with: -s
==7452== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ exit
exit

Script done on 2024-11-15 23:47:32-03:00 [COMMAND_EXIT_CODE="0"]
