Na linha 10, o programa tenta acessar a posi√ß√£o 26
por√©m a √∫ltima posi√ß√£o do ponteiro √© 25, pois foram
alocados 26 espa√ßos de mem√≥ria, indo de 0 a 25.

Para corrigir, basta alocar 1 espa√ßo a mais.


Script started on 2024-11-15 21:21:28-03:00 [TERM="xterm-256color" TTY="/dev/pts/4" COLUMNS="236" LINES="23"]
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gcc [K[Kc -g -o c7 c7.cv[K
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ valgrind --leak-check-[K=full ./c7
==6077== Memcheck, a memory error detector
==6077== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==6077== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==6077== Command: ./c7
==6077== 
==6077== Invalid write of size 1
==6077==    at 0x1091BC: main (c7.c:10)
==6077==  Address 0x4a4805a is 0 bytes after a block of size 26 alloc'd
==6077==    at 0x483DD99: calloc (in /usr/lib/x86_64-linux-gnu/valgrind/vgpreload_memcheck-amd64-linux.so)
==6077==    by 0x109183: main (c7.c:5)
==6077== 
==6077== 
==6077== HEAP SUMMARY:
==6077==     in use at exit: 0 bytes in 0 blocks
==6077==   total heap usage: 1 allocs, 1 frees, 26 bytes allocated
==6077== 
==6077== All heap blocks were freed -- no leaks are possible
==6077== 
==6077== For lists of detected and suppressed errors, rerun with: -s
==6077== ERROR SUMMARY: 1 errors from 1 contexts (suppressed: 0 from 0)
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gdb ./c7
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04.2) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./c7[m...
(gdb) break 8
Breakpoint 1 at [34m0x118e[m: file [32mc7.c[m, line 8.
(gdb) break 10
Breakpoint 2 at [34m0x11b4[m: file [32mc7.c[m, line 10.
(gdb) run
Starting program: /home/yuriwada/projects/ap04/c7 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
(gdb) disp¬¥lay[K[K[K[Klay alphab[K[K[K[K[K[K*alphabet
1: *alphabet = 65 'A'
(gdb) display *alphabet
[C[C[C[C[C[Cnext[K

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
(gdb) display i
2: i = 5 '\005'
(gdb) display i
3: i = 5 '\005'
(gdb) display i
4: i = 5 '\005'
(gdb) display i
[C[C[C[C[C[C[5Pnext[K[K[K[Kdelete [K[K[K[K[K[K[Kdelte[K[K[K[K[Kundisple[Kay 3
(gdb) undisplay 3[K4
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 6 '\006'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 6 '\006'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 7 '\a'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 7 '\a'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 8 '\b'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 8 '\b'
(gdb) next

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 9 '\t'
(gdb) display *(alhp[K[Kphabet + i)
5: *(alphabet + i) = 0 '\000'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 9 '\t'
5: *(alphabet + i) = 74 'J'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 10 '\n'
5: *(alphabet + i) = 0 '\000'
(gdb) next
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 10 '\n'
5: *(alphabet + i) = 75 'K'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 11 '\v'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 11 '\v'
5: *(alphabet + i) = 76 'L'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 12 '\f'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 12 '\f'
5: *(alphabet + i) = 77 'M'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 13 '\r'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 13 '\r'
5: *(alphabet + i) = 78 'N'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 14 '\016'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 14 '\016'
5: *(alphabet + i) = 79 'O'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 15 '\017'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 15 '\017'
5: *(alphabet + i) = 80 'P'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 16 '\020'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 16 '\020'
5: *(alphabet + i) = 81 'Q'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 17 '\021'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 17 '\021'
5: *(alphabet + i) = 82 'R'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 18 '\022'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 18 '\022'
5: *(alphabet + i) = 83 'S'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 19 '\023'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 19 '\023'
5: *(alphabet + i) = 84 'T'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 20 '\024'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 20 '\024'
5: *(alphabet + i) = 85 'U'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 21 '\025'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 21 '\025'
5: *(alphabet + i) = 86 'V'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 22 '\026'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 22 '\026'
5: *(alphabet + i) = 87 'W'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 23 '\027'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 23 '\027'
5: *(alphabet + i) = 88 'X'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 24 '\030'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 24 '\030'
5: *(alphabet + i) = 89 'Y'
(gdb) 

Breakpoint 1, [33mmain[m () at [32mc7.c[m:8
8	        *(alphabet + i) = 'A' + i;
1: *alphabet = 65 'A'
2: i = 25 '\031'
5: *(alphabet + i) = 0 '\000'
(gdb) 
7	    for(uint8_t i = 0; i < 26; i++) {
1: *alphabet = 65 'A'
2: i = 25 '\031'
5: *(alphabet + i) = 90 'Z'
(gdb) 

Breakpoint 2, [33mmain[m () at [32mc7.c[m:10
10	    *(alphabet + 26) = '\0'; //null-terminate the string?
1: *alphabet = 65 'A'
(gdb) display alphabet
6: alphabet = [34m0x5555555592a0[m "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
(gdb) display alphabet
[C[C[C[C[C[Cnext[K
12	    free(alphabet);
1: *alphabet = 65 'A'
6: alphabet = [34m0x5555555592a0[m "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
(gdb) 
13	    return 0;
1: *alphabet = 0 '\000'
6: alphabet = [34m0x5555555592a0[m ""
(gdb) quit
A debugging session is active.

	Inferior 1 [process 6714] will be killed.

Quit anyway? (y or n) y
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gcc -o[Kg -o apl[K[K[Kc7correto c7correto.c
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ valgrind --leak-check= [Kfull ./c7correto
==8001== Memcheck, a memory error detector
==8001== Copyright (C) 2002-2017, and GNU GPL'd, by Julian Seward et al.
==8001== Using Valgrind-3.15.0 and LibVEX; rerun with -h for copyright info
==8001== Command: ./c7correto
==8001== 
==8001== 
==8001== HEAP SUMMARY:
==8001==     in use at exit: 0 bytes in 0 blocks
==8001==   total heap usage: 1 allocs, 1 frees, 27 bytes allocated
==8001== 
==8001== All heap blocks were freed -- no leaks are possible
==8001== 
==8001== For lists of detected and suppressed errors, rerun with: -s
==8001== ERROR SUMMARY: 0 errors from 0 contexts (suppressed: 0 from 0)
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ gdb ./c7correto
[35;1m[35;1mGNU gdb [m[35;1m(Ubuntu 9.2-0ubuntu1~20.04.2) [m[35;1m9.2[m[35;1m
[m[mCopyright (C) 2020 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later <http://gnu.org/licenses/gpl.html>
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.
Type "show copying" and "show warranty" for details.
This GDB was configured as "x86_64-linux-gnu".
Type "show configuration" for configuration details.
For bug reporting instructions, please see:
<http://www.gnu.org/software/gdb/bugs/>.
Find the GDB manual and other documentation resources online at:
    <http://www.gnu.org/software/gdb/documentation/>.

For help, type "help".
Type "apropos word" to search for commands related to "word"...
Reading symbols from [32m./c7correto[m...
(gdb) break 1[K2[K12
Breakpoint 1 at [34m0x11bf[m: file [32mc7correto.c[m, line 12.
(gdb) display alphabet
No symbol "alphabet" in current context.
(gdb) 
No symbol "alphabet" in current context.
(gdb) display alphabet
[C[C[C[C[C[C[8Pbreak 12[K[K[K[K[K[K[K[Knext
The program is not being run.
(gdb) run
Starting program: /home/yuriwada/projects/ap04/c7correto 

Breakpoint 1, [33mmain[m () at [32mc7correto.c[m:12
12	    free(alphabet);
(gdb) runnextdisplay alphabet
1: alphabet = [34m0x5555555592a0[m "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
(gdb) display alphabet
[C[C[C[C[C[Crun[Knext
13	    return 0;
1: alphabet = [34m0x5555555592a0[m ""
(gdb) 
14	}
1: alphabet = [34m0x5555555592a0[m ""
(gdb) 
[33m__libc_start_main[m ([36mmain[m=0x555555555169 <main>, [36margc[m=1, [36margv[m=0x7fffffffdfd8, [36minit[m=<optimized out>, [36mfini[m=<optimized out>, [36mrtld_fini[m=<optimized out>, [36mstack_end[m=0x7fffffffdfc8) at [32m../csu/libc-start.c[m:342
342	../csu/libc-start.c: No such file or directory.
(gdb) quit
A debugging session is active.

	Inferior 1 [process 8194] will be killed.

Quit anyway? (y or n) y
]0;yuriwada@Yuri: ~/projects/ap04[01;32myuriwada@Yuri[00m:[01;34m~/projects/ap04[00m$ exit
exit

Script done on 2024-11-15 21:28:31-03:00 [COMMAND_EXIT_CODE="0"]
